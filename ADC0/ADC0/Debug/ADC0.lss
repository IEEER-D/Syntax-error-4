
ADC0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000138  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000057d  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004fc  00000000  00000000  00000795  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b4  00000000  00000000  00000c91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001048  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00005bd0  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00006c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000008d  00000000  00000000  00006c4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	02 d0       	rcall	.+4      	; 0x66 <main>
  62:	68 c0       	rjmp	.+208    	; 0x134 <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <main>:
#include <avr/io.h>
#define F_CPU 8000000

int main(void){
	DDRB = 0xff;
  66:	8f ef       	ldi	r24, 0xFF	; 255
  68:	87 bb       	out	0x17, r24	; 23
	
	ADMUX |= (1<<REFS0); //VCC is ref
  6a:	3e 9a       	sbi	0x07, 6	; 7
	ADMUX |= 0b00000111; //channel seven
  6c:	87 b1       	in	r24, 0x07	; 7
  6e:	87 60       	ori	r24, 0x07	; 7
  70:	87 b9       	out	0x07, r24	; 7

	ADCSRA |= (1<<ADEN); //enable ADC
  72:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); //pr-scale 128
  74:	86 b1       	in	r24, 0x06	; 6
  76:	87 60       	ori	r24, 0x07	; 7
  78:	86 b9       	out	0x06, r24	; 6
	while(1){
		ADCSRA |= (1<<ADSC); //start conversion
		while(ADCSRA & (1<<ADSC)); // hold till the conversion ends
		if ((ADC > 0) & ADC <= 200)
  7a:	81 e0       	ldi	r24, 0x01	; 1
  7c:	60 e0       	ldi	r22, 0x00	; 0
		else if ((ADC > 200) & ADC <= 400)
			PORTB =0x5A;
		else if ((ADC > 400) & ADC <= 600)
			PORTB |= 0xA5;
		else if ((ADC > 600) & ADC <= 1023)
			PORTB =0xFA;
  7e:	fa ef       	ldi	r31, 0xFA	; 250
		ADCSRA |= (1<<ADSC); //start conversion
		while(ADCSRA & (1<<ADSC)); // hold till the conversion ends
		if ((ADC > 0) & ADC <= 200)
			PORTB = 0x05;
		else if ((ADC > 200) & ADC <= 400)
			PORTB =0x5A;
  80:	ea e5       	ldi	r30, 0x5A	; 90
	ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); //pr-scale 128
	while(1){
		ADCSRA |= (1<<ADSC); //start conversion
		while(ADCSRA & (1<<ADSC)); // hold till the conversion ends
		if ((ADC > 0) & ADC <= 200)
			PORTB = 0x05;
  82:	75 e0       	ldi	r23, 0x05	; 5
	ADMUX |= 0b00000111; //channel seven

	ADCSRA |= (1<<ADEN); //enable ADC
	ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); //pr-scale 128
	while(1){
		ADCSRA |= (1<<ADSC); //start conversion
  84:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA & (1<<ADSC)); // hold till the conversion ends
  86:	36 99       	sbic	0x06, 6	; 6
  88:	fe cf       	rjmp	.-4      	; 0x86 <main+0x20>
		if ((ADC > 0) & ADC <= 200)
  8a:	24 b1       	in	r18, 0x04	; 4
  8c:	35 b1       	in	r19, 0x05	; 5
  8e:	44 b1       	in	r20, 0x04	; 4
  90:	55 b1       	in	r21, 0x05	; 5
  92:	98 2f       	mov	r25, r24
  94:	23 2b       	or	r18, r19
  96:	09 f4       	brne	.+2      	; 0x9a <main+0x34>
  98:	96 2f       	mov	r25, r22
  9a:	99 23       	and	r25, r25
  9c:	49 f0       	breq	.+18     	; 0xb0 <main+0x4a>
  9e:	98 2f       	mov	r25, r24
  a0:	49 3c       	cpi	r20, 0xC9	; 201
  a2:	51 05       	cpc	r21, r1
  a4:	08 f0       	brcs	.+2      	; 0xa8 <main+0x42>
  a6:	96 2f       	mov	r25, r22
  a8:	99 23       	and	r25, r25
  aa:	11 f0       	breq	.+4      	; 0xb0 <main+0x4a>
			PORTB = 0x05;
  ac:	78 bb       	out	0x18, r23	; 24
  ae:	ea cf       	rjmp	.-44     	; 0x84 <main+0x1e>
		else if ((ADC > 200) & ADC <= 400)
  b0:	24 b1       	in	r18, 0x04	; 4
  b2:	35 b1       	in	r19, 0x05	; 5
  b4:	44 b1       	in	r20, 0x04	; 4
  b6:	55 b1       	in	r21, 0x05	; 5
  b8:	98 2f       	mov	r25, r24
  ba:	29 3c       	cpi	r18, 0xC9	; 201
  bc:	31 05       	cpc	r19, r1
  be:	08 f4       	brcc	.+2      	; 0xc2 <main+0x5c>
  c0:	96 2f       	mov	r25, r22
  c2:	99 23       	and	r25, r25
  c4:	49 f0       	breq	.+18     	; 0xd8 <main+0x72>
  c6:	98 2f       	mov	r25, r24
  c8:	41 39       	cpi	r20, 0x91	; 145
  ca:	51 40       	sbci	r21, 0x01	; 1
  cc:	08 f0       	brcs	.+2      	; 0xd0 <main+0x6a>
  ce:	96 2f       	mov	r25, r22
  d0:	99 23       	and	r25, r25
  d2:	11 f0       	breq	.+4      	; 0xd8 <main+0x72>
			PORTB =0x5A;
  d4:	e8 bb       	out	0x18, r30	; 24
  d6:	d6 cf       	rjmp	.-84     	; 0x84 <main+0x1e>
		else if ((ADC > 400) & ADC <= 600)
  d8:	24 b1       	in	r18, 0x04	; 4
  da:	35 b1       	in	r19, 0x05	; 5
  dc:	44 b1       	in	r20, 0x04	; 4
  de:	55 b1       	in	r21, 0x05	; 5
  e0:	98 2f       	mov	r25, r24
  e2:	21 39       	cpi	r18, 0x91	; 145
  e4:	31 40       	sbci	r19, 0x01	; 1
  e6:	08 f4       	brcc	.+2      	; 0xea <main+0x84>
  e8:	96 2f       	mov	r25, r22
  ea:	99 23       	and	r25, r25
  ec:	59 f0       	breq	.+22     	; 0x104 <main+0x9e>
  ee:	98 2f       	mov	r25, r24
  f0:	49 35       	cpi	r20, 0x59	; 89
  f2:	52 40       	sbci	r21, 0x02	; 2
  f4:	08 f0       	brcs	.+2      	; 0xf8 <main+0x92>
  f6:	96 2f       	mov	r25, r22
  f8:	99 23       	and	r25, r25
  fa:	21 f0       	breq	.+8      	; 0x104 <main+0x9e>
			PORTB |= 0xA5;
  fc:	98 b3       	in	r25, 0x18	; 24
  fe:	95 6a       	ori	r25, 0xA5	; 165
 100:	98 bb       	out	0x18, r25	; 24
 102:	c0 cf       	rjmp	.-128    	; 0x84 <main+0x1e>
		else if ((ADC > 600) & ADC <= 1023)
 104:	24 b1       	in	r18, 0x04	; 4
 106:	35 b1       	in	r19, 0x05	; 5
 108:	44 b1       	in	r20, 0x04	; 4
 10a:	55 b1       	in	r21, 0x05	; 5
 10c:	98 2f       	mov	r25, r24
 10e:	29 35       	cpi	r18, 0x59	; 89
 110:	32 40       	sbci	r19, 0x02	; 2
 112:	08 f4       	brcc	.+2      	; 0x116 <main+0xb0>
 114:	96 2f       	mov	r25, r22
 116:	99 23       	and	r25, r25
 118:	49 f0       	breq	.+18     	; 0x12c <main+0xc6>
 11a:	98 2f       	mov	r25, r24
 11c:	41 15       	cp	r20, r1
 11e:	54 40       	sbci	r21, 0x04	; 4
 120:	08 f0       	brcs	.+2      	; 0x124 <main+0xbe>
 122:	96 2f       	mov	r25, r22
 124:	99 23       	and	r25, r25
 126:	11 f0       	breq	.+4      	; 0x12c <main+0xc6>
			PORTB =0xFA;
 128:	f8 bb       	out	0x18, r31	; 24
 12a:	ac cf       	rjmp	.-168    	; 0x84 <main+0x1e>
		else
			PORTB |= 0xAA;
 12c:	98 b3       	in	r25, 0x18	; 24
 12e:	9a 6a       	ori	r25, 0xAA	; 170
 130:	98 bb       	out	0x18, r25	; 24
 132:	a8 cf       	rjmp	.-176    	; 0x84 <main+0x1e>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
